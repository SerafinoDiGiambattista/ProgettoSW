/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id "pl.droidsonroids.jacoco.testkit" version "1.0.6"

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
    id 'jacoco'
}



repositories {
    // Use JCenter for resolving dependencies.
    jcenter()

}
dependencies {
    testImplementation('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }
     // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
 }

gradlePlugin {
    // Define the plugin
    plugins {
        prova {
            id = 'controllPlugin.prova'
            implementationClass = 'pluginTesi.ControllPlugin'
        }
    }
}


// Add a source set for the functional test suite
sourceSets {
    functionalTest {
        groovy.srcDir file('src/functionalTest/groovy')


        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
 }


gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

 }


tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}


functionalTest.dependsOn generateJacocoTestKitProperties
generateJacocoTestKitProperties.destinationFile = file("$buildDir.absolutePath/jacoco/functionalTest.exec")


jacocoTestReport {
    reports.html.enabled = true
    executionData.setFrom fileTree(buildDir).include("/jacoco/*.exec")
}

jacoco {
    toolVersion = "0.8.6"
}

